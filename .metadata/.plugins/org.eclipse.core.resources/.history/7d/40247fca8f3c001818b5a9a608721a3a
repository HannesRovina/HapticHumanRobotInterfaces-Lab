#include "haptic_controller.h"
#include "communication.h"
#include "drivers/adc.h"
#include "drivers/incr_encoder.h"
#include "drivers/hall.h"
#include "drivers/callback_timers.h"
#include "lib/utils.h"
#include "torque_regulator.h"
#define DEFAULT_HAPTIC_CONTROLLER_PERIOD 350 // Default control loop period [us].
volatile uint32_t hapt_timestamp; // Time base of the controller, also used to timestamp the samples sent by streaming [us].
volatile float32_t hapt_hallVoltage; // Hall sensor output voltage [V].
volatile float32_t hapt_encoderPaddleAngle; // Paddle angle measured by the incremental encoder [deg].
volatile float32_t hapt_paddleAngle; // Paddle angle measured by the calibrated Hall sensor [deg].
volatile float32_t hapt_paddleSpeed; // Paddle speed measured by the calibrated Hall sensor [deg/s].
volatile float32_t hapt_paddleAccel; // Paddle acceleration measured by the calibrated Hall sensor [deg/s^2].
volatile float32_t hapt_paddlePrevPos; // Previous paddle angle [deg].
volatile float32_t hapt_paddlePosFilt; // Filtered paddle position [deg].
volatile float32_t hapt_paddlePrevSpeed; // Previous paddle speed [deg/s].
volatile float32_t hapt_paddleSpeedFilt; // Filtered paddle speed [deg/s].
volatile float32_t hapt_paddleAccelFilt; // Filtered paddle acceleration [deg/s].
volatile float32_t hapt_motorTorque; // Motor torque [N.m].
const float32_t filterCutoffFreqSpeed = 100.0f; // Cutoff frequency for the speed/acceleration filter [Hz].
const float32_t filterCutoffFreqAccel = 10.0f; // Cutoff frequency for the speed/acceleration filter [Hz].
void hapt_Update(void);
float32_t hapt_LowPassFilter(float32_t previousFilteredValue, float32_t input,float32_t dt, float32_t tau);
/**
* @brief Initializes the haptic controller.
*/
void hapt_Init(void)
{
hapt_timestamp = 0;
hapt_motorTorque = 0.0f;
hapt_paddlePrevPos = 0.0f;
hapt_paddlePrevSpeed = 0.0f;
hapt_paddlePosFilt = 0.0f;
hapt_paddleSpeedFilt = 0.0f;
hapt_paddleAccelFilt = 0.0f;
// Make the timers call the update function periodically.
cbt_SetHapticControllerTimer(hapt_Update, DEFAULT_HAPTIC_CONTROLLER_PERIOD);
// Share some variables with the computer.
comm_monitorUint32Func("timestep [us]", cbt_GetHapticControllerPeriod, cbt_SetHapticControllerPeriod);
comm_monitorFloat("motor_torque [N.m]", (float32_t*)&hapt_motorTorque, READWRITE);
comm_monitorFloat("encoder_paddle_pos [deg]", (float32_t*)&hapt_encoderPaddleAngle, READONLY);
comm_monitorFloat("paddle_pos [deg]", (float32_t*)&hapt_paddleAngle, READONLY);
comm_monitorFloat("paddle_speed [deg/s]", (float32_t*)&hapt_paddleSpeed, READONLY);
comm_monitorFloat("paddle_accel [deg/s^2]", (float32_t*)&hapt_paddleAccel, READONLY);
comm_monitorFloat("paddle_pos_filt [deg]", (float32_t*)&hapt_paddlePosFilt, READONLY);
comm_monitorFloat("paddle_speed_filt [deg/s]", (float32_t*)&hapt_paddleSpeedFilt, READONLY);
comm_monitorFloat("paddle_accel_filt [deg/s^2]", (float32_t*)&hapt_paddleAccelFilt, READONLY);
comm_monitorFloat("hall_voltage [V]", (float32_t*)&hapt_hallVoltage, READONLY);
}
/**
* @brief Updates the haptic controller state.
*/
void hapt_Update()
{
float32_t motorShaftAngle; // [deg].
// Compute the dt (uncomment if you need it).
float32_t dt = ((float32_t)cbt_GetHapticControllerPeriod()) / 1000000.0f; // [s].
// Increment the timestamp.
hapt_timestamp += cbt_GetHapticControllerPeriod();
// Get the Hall sensor voltage.
hapt_hallVoltage = hall_GetVoltage();
// Compute the paddle angle from the Hall sensor voltage.
hapt_paddleAngle = hapt_hallVoltage * (-33.0037f) + 81.9710f;
//hapt_paddleAngle = enc_GetPosition() / REDUCTION_RATIO;


// Get the encoder position.
motorShaftAngle = enc_GetPosition();
hapt_encoderPaddleAngle = motorShaftAngle / REDUCTION_RATIO;

hapt_paddlePosFilt = hapt_LowPassFilter(hapt_paddlePosFilt,hapt_paddleAngle, dt,filterCutoffFreqSpeed);


// Compute the speed and accleration from the Hall paddle angle.
hapt_paddleSpeed = (hapt_paddlePosFilt - hapt_paddlePrevPos) / dt;

hapt_paddleSpeedFilt = hapt_LowPassFilter(hapt_paddleSpeedFilt,hapt_paddleSpeed, dt,filterCutoffFreqSpeed);

hapt_paddleAccel = (hapt_paddleSpeed - hapt_paddlePrevSpeed) / dt;
hapt_paddlePrevPos = hapt_paddlePosFilt;
hapt_paddlePrevSpeed = hapt_paddleSpeed;

// Filter the speed and acceleration.

hapt_paddleAccelFilt = hapt_LowPassFilter(hapt_paddleAccelFilt, hapt_paddleAccel, dt, filterCutoffFreqAccel);




// Compute the motor torque, and apply it.
hapt_motorTorque = 0.0f;
//hapt_motorTorque = 0.0014*sin(2*3.14*hapt_timestamp*1e-6);
torq_SetTorque(hapt_motorTorque);
}
/**
* @brief Filters a signal with an exponential smoothing method.
* @param previousFilteredValue the previous filtered value.
* @param input the filter input (the current sample of the signal to filter).
* @param dt the time elapsed since the last call of this function [s].
* @param cutoffFreq the frequency period of the filter [s].
* @return the new output of the filter.
* @remark Formula from: https://en.wikipedia.org/wiki/Exponential_smoothing
*/
float32_t hapt_LowPassFilter(float32_t previousFilteredValue, float32_t input, float32_t dt, float32_t cutoffFreq)
{
float32_t tau = 1.0f / (2.0f * PI * cutoffFreq); // Rise time (time to reach 63% of the steady-state value).
float32_t alpha = dt / tau; // Smoothing factor.
return alpha * input + (1.0f - alpha) * previousFilteredValue;
}
