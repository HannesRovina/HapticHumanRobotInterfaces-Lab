%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/manu/Dropbox/EPFL Spring 2018/Haptic HRI/HapticHumanRobotInterfaces-Lab/LogFiles/SimVsReal/sine_real_0011.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/04/14 12:42:57

%% Initialize variables.
filename = '/home/manu/Dropbox/EPFL Spring 2018/Haptic HRI/HapticHumanRobotInterfaces-Lab/LogFiles/SimVsReal/sine_real_0011.csv';
delimiter = ';';
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
sinereal0011 = table(dataArray{1:end-1}, 'VariableNames', {'timestamps','actual_currentA','target_currentA','timestepus','motor_torqueNm','encoder_paddle_posdeg','paddle_pos_filtdeg','paddle_speed_filtdegs','paddle_accel_filtdegs2','hall_voltageV','enablePID','Target_Angledeg','Kp','Ki','Kd','enableEncoder_Angle','rise_times','overshoot_angledeg','led_00010','led_10010','led_20010','led_30010'});

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Generate plots

time = sinereal0011.timestamps;
theta = sinereal0011.paddle_pos_filtdeg;
omega = sinereal0011.paddle_speed_filtdegs;
omega_dot = sinereal0011.paddle_accel_filtdegs2;

figure()
plt = plot(time,theta-mean(theta),'LineWidth',2)
xlabel('Time [s]')
ylabel('Angle [deg]')
xlim([min(time),max(time)])
title('Angular displacement(degrees)')
saveas(plt,'Real_Position.png')
figure()
plt = plot(time,omega,'LineWidth',2)
xlabel('Time [s]')
ylabel('Angular velocity [deg/s]')
xlim([min(time),max(time)])
title('Angular velocity(degrees/s)')
saveas(plt,'Real_Velocity.png')
figure()
plt = plot(time,omega_dot,'LineWidth',2)
xlabel('Time [s]')
ylabel('Angular acceleration [deg/s^2]')
xlim([min(time),max(time)])
title('Angular acceleration (degrees/s^2)')
saveas(plt,'Real_Acceleration.png')
%%
figure()
plt = plot(time-min(time),theta-mean(theta),'LineWidth',2)
hold on
plt = plot(t(find(t>0.65):find(t>15.65))-min(t)-0.65,phi(find(t>0.65):find(t>15.65)),'LineWidth',2)
xlabel('Time [s]')
ylabel('Angle [deg]')
legend('Real paddle position','Paddle position from Simulink')
% xlim([min(time),max(time)])
title('Angular displacement(degrees)')
saveas(plt,'RealvsSim_Position.png')